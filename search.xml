<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AJAX总结--JS原生Ajax & jQuery Ajax]]></title>
    <url>%2F2019%2F09%2F22%2FAJAX%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[原生Ajaxget请求流程 创建ajax请求对象： 大多数浏览器为XMLHTTPRequest()，高版本IE浏览器为ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)，低版本IE浏览器为ActiveXObject(&quot;Microsoft.XMLHTTP&quot;) 123456789101112131415161718function ajaxFunction()&#123; var xmlHttp; try&#123; // Firefox, Chrome, Opera 8.0+, Safari xmlHttp=new XMLHttpRequest(); &#125; catch (e)&#123; try&#123;// Internet Explorer（高版本） xmlHttp=new ActiveXObject("Msxml2.XMLHTTP"); &#125; catch (e)&#123; try&#123;// Internet Explorer（低版本） xmlHttp=new ActiveXObject("Microsoft.XMLHTTP"); &#125; catch (e)&#123;&#125; &#125; &#125; return xmlHttp; &#125; 使用open方法创建http请求，并设置请求地址 123456789101112131415//执行get请求function get() &#123; //1. 创建xmlhttprequest 对象 var xhr = ajaxFunction(); //2. 发送请求。 /* * 参数一： 请求类型 GET or POST * 参数二： 请求的路径 * 参数三： 是否异步， true or false */ xhr.open("GET" ,"TestServlet" ,true ); xhr.send();&#125; 如果发送请求的同时，还想获取数据，那么代码如下 12345678910111213141516171819202122//执行get请求function get() &#123; //1. 创建xmlhttprequest 对象 var xhr = ajaxFunction(); //2. 设置请求参数 xhr.open("GET" ,"TestServlet?name=aa&amp;age=18" ,true ); //3. 获取响应数据 注册监听的意思。 一会准备的状态发生了改变，那么就执行 = 号右边的方法 xhr.onreadystatechange = function()&#123; // readyState的值一共有5个状态，参见下表 // readyState == 4 表示请求已经完成， 再判断状态码是否是200，200表示服务端正常响应(没有报错) if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123; //弹出响应的信息 alert(request.responseText); &#125; &#125; // 4. 发送请求 xhr.send();&#125; post请求流程Post请求方式和Get请求基本相同，只是由于post方式传递数据是模仿form表单传递给服务器的,要设置header头协议 12345678910111213141516171819202122232425262728//1. 创建对象// 和get请求一样function post() &#123; //1. 创建请求对象 var xhr = ajaxFunction(); // 2. 设置请求地址、参数、类型(post、get) xhr.open("post", "StudentServlet", true); //3. 获取响应数据 注册监听的意思。 一会准备的状态发生了改变，那么就执行 = 号右边的方法 xhr.onreadystatechange = function()&#123; //前半段表示 已经能够正常处理。 再判断状态码是否是200 if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123; //弹出响应的信息 console.log("请求完成"); var h1 = document.getElementById("h1"); h1.innerHTML = xhr.responseText; &#125; &#125; // 4. 如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据 xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); // 5. 发送请求 // 如果是GET请求，参数写在这里是无效的 xhr.send("id=555");&#125; jQuery Ajax$.ajax()的使用该方法用于执行Ajax请求，常用于其他jQuery Ajax方法不能完成的请求，是jQuery中Ajax系列方法的的底层实现，其他方法都是在它的基础上给我们封装的更方便使用的方法。 形式：$.ajax(url, [settings]);常用字段： url：链接地址，字符串 type：“POST&quot;或 “GET&quot;，请求类型 data：需发送到服务器的数据，GET与POST都可以，格式为{A: ‘…’, B: ‘…’} dataType：服务器响应的数据类型，字符串表示；当填写为json时，回调函数中无需再对数据反序列化为json success：请求成功后，服务器回调的函数 error：请求失败后，服务器回调的函数 123456789101112131415$.ajax("TestServlet", &#123; type: "GET", data: &#123; action: "json", uname: "zhangsan" &#125;, dataType: "json", success: function(data, status_text)&#123; console.log(data); console.log("status_text: " + status_text); &#125;, error: function(xhr, textStatus, errorThrow) &#123; console.log("请求失败"); &#125;&#125;); $.get()的使用$.get()方法使用GET方式来进行异步请求，它的语法结构为： $.get(url, data, func, dataType); 123456789101112/* * 参数： * url: 请求地址 * data: 待发送 Key/value 参数 * fn: 请求成功后回调函数 * type: 返回内容格式，xml, html, script, json, text, _default */$.get( "url",&#123;pid:pid&#125; ,function(data,status_text)&#123; console.log(data); console.log("status_text: " + status_text);&#125;,"json" ); // 指定请求返回的格式是json，jquery会帮我们把服务端返回的json字符串转换成js的json对象 $.post()的使用$.post()方法使用POST方式来进行异步请求，它的语法结构为： $.post(url, data, function, dataType); 123456789101112/* * 参数： * url: 请求地址 * data: 待发送 Key/value 参数 * fn: 请求成功后回调函数 * type: 返回内容格式，xml, html, script, json, text, _default */$.post( "url",&#123;pid:pid&#125; ,function(data,status)&#123; console.log(data); console.log("status_text: " + status_text);&#125;,"json" ); // 指定请求返回的格式是json，jquery会帮我们把服务端返回的json字符串转换成js的json对象 $.getJSON();的使用$.getJSON()是专门为ajax获取json数据而设置的，该方法使用GET方式执行Ajax请求，从服务器加载JSON格式数据，并且支持跨域调用，它的语法结构为： $.getJSON(url, data, func); 因为确定服务器返回的是json编码的数据，所以相较于$.get()不用再指定dataType。 123$.getJSON("url", &#123;id:1, name: "zhangsan"&#125; function(json)&#123; console.log(json);&#125;); 以上四个方法的关系和区别？$.ajax()是jQuery的底层AJAX实现，$.get()和$.post()是简单易用的jQuery高层AJAX实现 $.getJSON()是通过 HTTP GET 请求载入 JSON 数据。]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cookie & Session总结]]></title>
    <url>%2F2019%2F09%2F22%2FCookie-Session%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[CookieCookie是什么Cookie是一种能够让Web服务器把少量数据储存到客户端的硬盘或内存里，或是从客户端的硬盘里读取数据的一种技术。 为什么要使用Cookie因为HTTP协议是一种无状态协议，Http没有保存状态，对每一个请求无法区别每个请求对应的是哪个用户，也无法判定是否是用户已经登录或者是还没登录，所以需要引入一种机制，通过在浏览器中存储一些数据，记录用户的登录状态和保存用户的登录信 息；引入cookie之后，在请求时会把cookie附加到请求头中，这样服务端一读取请求头就知道了这次请求是哪个用户发起的。 什么情况下要使用CookieCookie的使用分为在业务程序中显式使用和通过容器隐式使用。 隐式使用： 首次访问JSP、Servlet时，Servlet容器会自动往响应头中添加一个Cookie(Tomcat中是JSESSIONID) 显式使用： 当我们有一些安全性要求不高，数据量不大的用户数据需要存储时，可以考虑使用Cookie 怎么使用Cookie?Cookie的属性 在Chrome浏览器开发者模式中，我们可以看到网站的cookie；图中可以看到Cookie具有的属性有 Name、value、Domain、path、Expires/Max-Age、Size、HTTP、Secure等。 Name：该Cookie的名称，一旦创建，名称便不可更改 Value：该Cookie的值，如果值为Unicode字符，需要为字符编码 Domain：可以访问到这个Cookie的域名。如果设置为.google.com,则所有以google.com结尾的域名都可以访问该 Cookie。注意第一个字符必须为. 注： 非顶级域名，如二级域名或者三级域名，设置的cookie的domain只能为顶级域名或者二级域名或者三级域名本身，不能设置其他二级域名的cookie，否则cookie无法生成。 顶级域名只能设置domain为顶级域名，不能设置为二级域名或者三级域名，否则cookie无法生成。 二级域名能读取设置了domain为顶级域名或者自身的cookie，不能读取其他二级域名domain的cookie。所以要想cookie在多个二级域名中共享，需要设置domain为顶级域名，这样就可以在所有二级域名里面或者到这个cookie的值了。 顶级域名只能获取到domain设置为顶级域名的cookie，其他domain设置为二级域名的无法获取。 Path：可以访问到这个Cookie的页面路径。 比如domain是.goole.com, path是/TestServlet，那么只有/TestServlet 路径下的页面可以读取此Cookie。 Expires/Max-Age: 该Cookie失效时间，单位秒。Cookie在maxAge秒之后失效。 Size：此Cookie的大小。 HTTP：此cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。 Secure：设置是否只能通过https来传递此条cookie。 Cookie的创建1234567891011121314151617// 两种方法// 1. 构造时将数据传入Cookie cookie = new Cookie("key", "value");// 2. 构造时无参，然后通过set方法设置数据Cookie cookie = new Cookie();cookie.setName("key");cookie.setValue("value");// 除了核心的数据之外，我们还可以设置一些其他属性// 1. 设置过期时间cookie.setMaxAge(60); //单位：秒(60秒后,Cookie会自动删除)// 2. 设置Domaincookie.setDomain("www.baidu.com"); // 代表只有访问www.baidu.com这个域名下的请求，才能获取到此Cookiecookie.setDomain(".baidu.com"); // 代表所有www.baidu.com下的二级域名包括www.baidu.com这个一级域名都可以共享此Cookie（注意这种情况下domain必须以"."开头）// 3. 设置Path cookie.setPath("/StudentServlet"); // 一旦设置了Path，那么要获取Cookie，当前的请求地址必须满足Path的规则，否则获取不到此Cookie http://xxx:port/student/StudentServlet/getstu/3 Cookie的添加12// 使用响应对象写入浏览器reponse.addCookie(cookie); //本质上会在响应中添加一个Set-Cookie响应头。 Cookie删除1234// Cookie没有delete方法// 我们可以通过设置过期时间为0实现删除cookie.setMaxAge(0);response.addCookie(cookie); Cookie的修改123456// Cookie的修改其实就是覆盖添加// 具体来说分三步// 1. 先获取已有Cookie，// 2. 然后修改其中的数据，// 3. 最后调用response.addCookie()重新添加到浏览器，浏览器看到Key相同的Cookie会自动更新 获取Cookie中的数据123456789// 1. 先通过请求对象获取请求中携带的所有Cookie数组Cookie[] cookies = request.getCookies();// 2. 迭代Cookie数组，寻找要操作的Cookiefor(Cookie cookie : cookies) &#123; // 根据cookie.getName()判断是否是自己要获取数据的cookie // 3. 找到后，调用cookie.getValue()获取数据&#125; SessionSession是什么？Session和Cookie类似，都是用来存储用户信息的。不同于Cookie的是Session是存储在服务器端。他们两者通过JSESSIONID关联起来。 为什么要用Session？虽然Cookie已经可以标识出哪个请求是属于哪个用户的。但是不足的是Cookie本身是存储于客户端硬盘上，安全性不高，不适合存储敏感数据，还有Cookie本身能存储的数据很有限（数据大小本身限制、数据类型限制、字符集限制）。而存储在服务端的Session完全没有这些问题。 什么情况下要使用Session?Session可以用来存储用户的所有信息，理论上所有能在Cookie中存储的数据都可以放到Session中。考虑到Session是基于内存的，如果存储太多不太重要的数据会大大增加服务器端内存压力，一般Session会配合Cookie一起使用。 怎么使用Session?创建Session12// Session是由容器自动创建的，我们可以在代码中直接获取SesssionHttpSession session = request.getSession(); 往Session中存储数据1session.setAttribute(); 获取Session中的数据1session.getAttribute(); 删除Session中的数据1session.removeAttribute(); 修改Session中的数据12345678910// 修改Session中的数据和修改Cookie中的数据类似，都是覆盖添加// 1. 获取要修改的数据Object data = session.getAttribute("key");// 2. 修改数据对应的属性data.setXXX();// 3. 将修改后的数据重新存入Sessionsession.setAttribute("key", data); 强制让Session失效1session.invalidate(); //调用后session对象会失效，同时客户端Cookie中的JSESSIONID也会发生变化]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaWeb分页实现总结]]></title>
    <url>%2F2019%2F09%2F22%2FJavaWeb%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[基于MySQL的查询分页物理分页物理分页是直接使用SQL语句通过数据库的特性查询数据库，实现分页，每次从数据库中获取的数据都仅仅是一页的数据。 物理分页的好处就是效率高。 不好的地方就是不同数据库有不同的搞法，因为要依赖查询语句来查询数据库，所以不同的数据库，使用的分页语句也都不相同。 MySQL中的分页：使用limit关键字 12select * from student limit 0, 10-- 表示的是从第0条开始取，取10条数据 逻辑分页逻辑分页就是一次性把数据查询出来，之所以叫逻辑分页就是因为每次从数据库查询数据时没有做分页，而是将取得的所有数据储存到内存缓存中，每次翻页是在内存中对数据做裁剪，取得数据。 逻辑分页的好处就是翻页的速度快，对于数量量比较小来说很适合，数据量大，最好采用物理分页，防止内存溢出。且逻辑分页并不依赖于数据库来实现，所以所有的数据库逻辑分页实现方案都一样。 逻辑分页方法： 根据条件sql查询数据库 得到ResultSet的结果集,由于ResultSet带有游标，因此可以使用其next()方法来指向下一条记录 利用next()方法，得到分页所需的结果集 通用的分页参数参数概览 当前页（前端页面传参） 每页条数（前端页面传参） 总条数（从数据库中查询得到） 总页数（由总页数和每页条数计算得知） 每页要展示的数据 计算公式假设数据库使用的是mysql， 第一页从1开始 总页数算法： 总条数 / 每页条数， 能整除就用商； 不能整除商+1 取当前页数据 开始位置：（当前页 - 1）* 每页条数 结束位置（使用与逻辑分页）：当前页 * 每页条数 取多少条（适用于mysql物理分页）：每页条数]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse导入web项目出现红叉解决办法]]></title>
    <url>%2F2019%2F09%2F19%2FEclipse%E5%AF%BC%E5%85%A5web%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0%E7%BA%A2%E5%8F%89%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[eclipse导入别人的Java web项目时会出现这种情况：仅项目名出现红叉而其他地方没有红叉的问题。 这可能是以下几种情况导致的，其解决方法如下： 导入项目之前，请确认工作空间编码已设置为utf-8：window-&gt;Preferences-&gt;General-&gt;Wrokspace-&gt;Text file encoding-&gt;Other 选择UTF-8。 导入后，由于你的开发环境中JRE以及Tomcat Library名称可能和源代码中的不一致，可能会出现Build Path的错误，解决方法如下：右键project-&gt;Build Path-&gt;Configure Build Path-&gt;选择Libraries tab页-&gt;删除带小红叉的Library-&gt;点击Add Library-&gt;选择JRE System Library(删了Tomcat Library的话就选择Server Runtime)-&gt;选择一个JRE后-&gt;Finish。 如果web项目能够正常部署且运行无误，进入项目包下的.settings目录，找到org.eclipse.wst.common.project.facet.core.xml文件，用记事本打开后才发现这句话有问题：《runtime name=”Apache Tomcat v6.0”/》。我eclipse中设置的tomcat是9.0版本的，而它的运行环境是8.5版本的tomcat，肯定会出现问题。于是把这句话删掉，刷新工程，红叉消失。]]></content>
      <categories>
        <category>错误解决</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>java web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建过程]]></title>
    <url>%2F2019%2F09%2F09%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[环境准备1.Git下载安装2.Node.JS下载安装安装完成后，要确认是否已经安装成功，在cmd中使用下列命令来验证，有返回的信息就表示安装成功了 git –version node -v npm -v 安装Hexo 在git bash中输入 npm install -g hexo-cli 因为npm默认是从国外的源获取和下载包信息，所以这个命令有时候执行很慢，甚至可能因为被墙导致无法正常安装hexo，安装失败的话建议启用科学上网或百度搜索npm加速方法解决 安装成功后的信息显示如下： 初始化Hexo安装hexo完成后，在电脑中任意位置创建一个文件夹，名字可以随意取，这个文件夹就是存放hexo站点和以后写博客的地方，进入刚刚创建的文件夹，在空白位置右键选择Git Bash Here， 执行初始化hexo的命令 hexo init 初始化完成过程如下： 安装依赖包 npm install 这个命令是用来安装一些Node.js 模块。命令执行的结果如下： git部署安装 npm install hexo-deployer-git –save 完成这一步，hexo的安装就已经完成了。进入站点文件夹查看内容如下： 注意： hexo相关命令均在站点目录下执行，用Git Bash运行 站点配置文件为站点目录下的 _config.yml文件，可以配置大部分的参数 package.json 存放着应用程序的信息，默认已安装EJS, Stylus 和 Markdown renderer等软件 scaffold 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改 source 资源文件夹。是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去 themes 主题文件夹，hexo会根据主题来生成静态页面，主题配置文件为主题文件夹下的_config.yml文件 本地预览Hexo博客第一次使用hexo，可以先在本地创建服务器使用 hexo generate # 生成静态页面 //可以直接用hexo g 命令 hexo s # 开启本地服务器 执行情况如下： 接下来到浏览器输入 localhost:4000 就可以看到页面内容了： 至此，Hexo博客已经成功搭建在本地了 部署Hexo博客github准备 首先要有一个github帐号，注册并登录github 然后新建一个仓库， 仓库名为：&lt;Github账号名称&gt;.github.io 将本地Hexo博客推送到新建的github仓库内本教程使用http协议部署hexo博客 修改配置文件blog/_config.yml，修改deploy项的内容（在文件末尾）。 1234deploy: type: git repo: https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 注意：每个标签冒号后面都要有一个空格 输入以下命令将hexo博客部署到github中，返回INFO Deploy done: git即成功推送 hexo clean # 清空静态页面 hexo generate # 生成静态页面 hexo deploy # 上传到仓库 等待1分钟左右，浏览器访问网址： https://&lt;Github账号名称&gt;.github.io，自此，Hexo博客已经搭建到了github上 在Hexo博客中发布文章新建一篇文章 在hexo博客目录下，进入Git Bash命令窗口，输入以下命令： hexo new “Article” 进入博客目录下的/source/_posts/ 文件夹，可以看到已经生成了名为Article.md的博客文件 如图所示： 打开Article.md文件，进行编辑即可 给文章添加分类和标签在打开的Article.md中，可以看到开头已经自动生成了一段配置列表，在其中设置tags和categories属性： 123456title: Articledate: 2019-09-07 20:46:51tags:- 博客- hexocategories: 测试 添加阅读全文按钮 方法一： 在文章任意你想添加的位置添加如下标签即可 1&lt;!-- more--&gt; 例如jQuery总结.md里的内容是： ---title: Articledate: 2019-09-07 20:46:51tags:- 博客- hexocategories: web前端---## 如何引入jQuery**jQuery本质上就是一段普通的JavaScript代码， 通常使用引入外部JS的方式来使用jQuery**```&lt;script type=&quot;text/javascript&quot; src=“js/jquery.js”&gt;&lt;/script&gt;```&lt;!--more--&gt;以下是正文内容，在首页预览内不显示 在网页上显示的效果是： 方法二： 打开主题配置文件，找到auto_excerpt进行如下修改 123auto_excerpt: enable: true length: 150 length为摘要截取的字符长度 注：这两张方向显示的方法显示的样式不一样，可以都尝试一下选择喜欢的方式进行添加 在文章中插入图片 方法一： 在hexo目录下，安装插件 npm install hexo-asset-image –save 在hexo\source目录下新建一个img文件夹，把图片放置在里面 在xxx.md文件中引用图片 1![header]( img/header.jpg) 方法二： 在全局配置文件hexo/_config.yml中将post_asset_folder设置为true 创建文章（在创建的时候，会在hexo/source/_post目录下，生成一个XXX.md文件和一个XXX的文件夹） 把XXX这个博文需要展示的图片放在XXX文件夹目录下 在XXX.md文件中引入图片的方式 1&#123;% asset_img example.jpg This is an example image %&#125; 方法三： 使用图床工具（本教程中插入的所有图片都是使用sm.ms提供的免费图床服务） 进入sm.ms网站，首页就是上传图片区域，选择要上传的图片点击Upload按钮，底部即会自动生成各种格式的图片链接，复制Markdown专用的链接，粘贴到文章中即可显示图片 启动服务器，在本地进行测试 hexo s 发布文章到github上待发布的文章在本地预览无误后，在Git Bash窗口执行以下命令 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 在浏览器访问网址： https://&lt;Github账号名称&gt;.github.io，即可看到已经发布的文章]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo搭建教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery总结]]></title>
    <url>%2F2019%2F09%2F07%2FjQuery%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[jQuery基础如何引入jQueryjQuery本质上就是一段普通的JavaScript代码， 通常使用引入外部JS的方式来使用jQuery 1&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt; 基础语法基础语法： $(selector).action() 美元符号定义 jQuery 选择符（selector）”查询”和”查找” HTML 元素 jQuery 的 action() 执行对元素的操作 实例: $(this).hide() - 隐藏当前元素 $(“p”).hide() - 隐藏所有 元素 $(“p.test”).hide() - 隐藏所有 class=”test” 的 元素 $(“#test”).hide() - 隐藏所有 id=”test” 的元素 选择器1$(slector) selector就是选择器表达式，语法基本和CSS选择器一致 示例： $(“#container”) $(“.container”) $(“img”) $(“input[type=’password’]”) $(“#container image”) HTML操作DOM操作jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易 属性操作attr()：用于获取属性值 读取属性 12345$(selector).attr(attrName);//示例var href = $("a").attr("href");var id = $("div").attr("id"); 修改属性 1234$(selector).attr(attrName, "属性值");//示例var href = $("a").attr("href", "http://www.jd.com"); 属性名不仅支持标准属性，还支持自定义属性 内容操作获得内容 text()：设置或返回所选元素的文本内容 html()：设置或返回所选元素的内容（包括 HTML 标记 val()：设置或返回表单字段的值 1234567891011//通过 jQuery text() 和 html() 方法获得内容:$("#btn1").click(function()&#123; alert("Text: " + $("#test").text());&#125;);$("#btn2").click(function()&#123; alert("HTML: " + $("#test").html());&#125;);//通过 jQuery val() 方法获得输入字段的值：$("#btn1").click(function()&#123; alert("值为: " + $("#test").val());&#125;); 样式操作通过 jQuery，可以很容易地对 CSS 元素进行操作 addClass() - 向被选元素添加一个或多个类 1234$("button").click(function()&#123; $("h1,h2,p").addClass("blue"); $("div").addClass("important");&#125;); removeClass() - 从被选元素删除一个或多个类 123$(&quot;button&quot;).click(function()&#123; $(&quot;h1,h2,p&quot;).removeClass(&quot;blue&quot;);&#125;); toggleClass() - 对被选元素进行添加/删除类的切换操作 123$("button").click(function()&#123; $("h1,h2,p").toggleClass("blue");&#125;); css() - 设置或返回样式属性 设置css属性 1$("p").css("background-color","yellow"); 返回css属性 1$("p").css("background-color"); 事件 鼠标事件 键盘事件 表单事件 文档/窗口事件 click keypress submit load dblclick keydown change resize mouseenter keyup focus scroll mouseleave blur unload hover 效果显示隐藏通过 jQuery使用hide()和show() 方法来隐藏和显示 HTML 元素 123456789101112131415//例：&lt;script&gt; $(document).ready(function()&#123; $("#hide").click(function()&#123; $("p").hide(); &#125;); $("#show").click(function()&#123; $("p").show(); &#125;);&#125;);&lt;/script&gt;&lt;p&gt;如果你点击“隐藏” 按钮，我将会消失。&lt;/p&gt;&lt;button id="hide"&gt;隐藏&lt;/button&gt;&lt;button id="show"&gt;显示&lt;/button&gt; 使用 toggle() 方法来切换 hide() 和 show()方法 123$("button").click(function()&#123; $("p").toggle();&#125;); 淡入淡出fadeIn()方法：用于淡入已隐藏的元素 12345$("button").click(function()&#123; $("#div1").fadeIn(); $("#div2").fadeIn("slow"); $("#div3").fadeIn(3000);&#125;); fadeOut()方法：用于淡出可见元素 12345$("button").click(function()&#123; $("#div1").fadeOut(); $("#div2").fadeOut("slow"); $("#div3").fadeOut(3000);&#125;); fadeToogle()方法：可以在 fadeIn() 与 fadeOut() 方法之间进行切换 12345$("button").click(function()&#123; $("#div1").fadeToggle(); $("#div2").fadeToggle("slow"); $("#div3").fadeToggle(3000);&#125;); fadeTo()方法：允许渐变为给定的不透明度（值介于 0 与 1 之间） 12345$("button").click(function()&#123; $("#div1").fadeTo("slow",0.15); $("#div2").fadeTo("slow",0.4); $("#div3").fadeTo("slow",0.7);&#125;); 滑动slideDown()方法：用于向下滑动元素 123$("#flip").click(function()&#123; $("#panel").slideDown();&#125;); slideUp()方法：用于向上滑动元素 123$("#flip").click(function()&#123; $("#panel").slideUp();&#125;); slideToggle()方法：可以在 slideDown() 与 slideUp() 方法之间进行切换 123$("#flip").click(function()&#123; $("#panel").slideToggle();&#125;); 动画使用jQuery animate() 方法可以创建自定义的动画 遍历遍历jQuery对象遍历数组for...in循环语句用于遍历数组或者对象的属性进行循环操作 循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作 1234567891011121314151617//语法for (变量 in 对象)&#123; 在此执行代码&#125;//例&lt;script type="text/javascript"&gt; var x var mycars = new Array() mycars[0] = "Saab" mycars[1] = "Volvo" mycars[2] = "BMW" for (x in mycars)&#123; document.write(mycars[x] + "&lt;br /&gt;") &#125;&lt;/script&gt; AjaxjQuery也可以实现异步加载]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Java学习总结</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript总结]]></title>
    <url>%2F2019%2F09%2F07%2FJavaScript%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[JavaScript基础如何引入JavaScript外联文件1&lt;script src="引入的文件位置（本地文件位置或者远程链接）"&gt;&lt;/script&gt; 内联文件123&lt;script type="text/javascript"&gt; js代码编写的位置&lt;/script&gt; Js输出语句用于基本的调试： 123document.write() //向body中写入字符串console.log() //向控制台输出alert() //弹出框 基础语法 语句分号（ ；）结尾，大括号包裹语句块（基本与Java语法类似） 严格区分大小写 没有添加分号时浏览器自动添加，但是消耗资源并且可能添加出错 注释Hbuilder快捷键 Ctrl + / 添加注释** 单行注释：// 多行注释：/* */ JavaScript基本数据类型​ JavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等 Number Js中只有一种数值类型Number Js中的Number可以表示十进制，八进制，十六进制整数，浮点数，科学记数法 Js中的Number基本类型可以精确表示的最大整数是2^53，BigInt可以表述任意大的整数 String 字符串被引号包围。可以使用单引号或双引号 Boolean 布尔值只有两个值 true false，经常用在条件测试中 undefined 表示声明了但未赋值的变量，其值是 undefined ，typeof 也返回 undefined 1234//已经声明的变量未赋值则成为undefined var a; console.log(typeof a);//结果为undefined 任何变量均可通过设置值为 undefined 进行清空。其类型也将是 undefined 空值与 undefined 不是一回事，空的字符串变量既有值也有类型。 1var car = ""; // 值是 ""，类型是 "string" null null表示一个对象不存在，其数据类型为Object 1234//表示一个空对象 var a = null; console.log(typeof a);//结果为object Object Function Function是一个功能完整的对象，作为JS的内置对象之一。JS的普通函数都是Function对象的实例，所以函数本身也是一个对象，就像var一样，只不过这个对象具有可调用特征而已。 function只是一个关键字，用来创建一个普通函数或对象的构造函数。 RegExp RegExp 对象是带有预定义属性和方法的正则表达式对象 正则表达式，在 JavaScript 中，正则表达式常用于两个字符串方法：search() 和 replace() 12search() //使用表达式来搜索匹配，然后返回匹配的位置。replace() //返回模式被替换处修改后的字符串。 正则表达式修饰符 123i //执行对大小写不敏感的匹配g //执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）m //执行多行匹配 Date 日期对象是一个静态的对象，计算机时间会不断变化，但日期对象不会 new Date() 用当前日期和时间创建新的日期对象，参数可以填year, month, ...，用于指定日期和时间创建新的日期对象 1var d = new Date(2018, 11, 24, 10, 33, 30, 0); //变量分别为年、月、日、小时、分钟、秒和毫秒 JSON JSON对象语法 1&#123; "name":"Nya", "age":21, "car":null &#125; JSON 对象被花括号{}包围 JSON对象以键/值对的方式书写 键必须是字符串，值必须是有效的 JSON 数据类型（字符串、数字、对象、数组、布尔或 null） 键和值由冒号分隔 每个键/值对由逗号分隔 访问JSON对象值 使用点（.）访问对象JSON值 12myObj = &#123; "name":"Nya", "age":21, "car":null &#125;;x = myObj.name; 也可以使用户方括号（[]）访问JSON对象值 12myObj = &#123; "name":"Nya", "age":21, "car":null &#125;;x = myObj["name"]; 遍历JSON对象 使用for-in遍历JSON对象 1234myObj = &#123; "name":"Nya", "age":21, "car":null &#125;;for (x in myObj)&#123; document.getElementById("demo").innerHtml += myObj[x];&#125; 对于嵌套的JSON对象，使用点号和括号访问嵌套的JSON对象 12345678910/***实例***/myObj = &#123; "name":"Bill Gates", "age":62, "cars": &#123; "car1":"Porsche", "car2":"BMW", "car3":"Volvo" &#125;&#125; 1234/***访问方法***/x = myObj.cars.car2;//或者：x = myObj.cars["car2"]; 修改值 也是使用点号或括号来修改JSON对象中的任意值 12myObj.cars.car3 = "Mercedes Benz"; //使用点号myObj.cars["car3"] = "Mercedes Benz"; //使用括号 删除对象属性 使用delete删除JSON对象的属性1delete myObj.cars.car1; ​ typeof 操作符的注意点： typeof 是操作符，不是方法。虽然我们经常使用 typeof() 的方式获取对象的数据类型 对 null 取 typeof 是 object（这是因为 null 是 空的对象引用），对函数取 typeof 是 function 123456console.log(typeof null); //返回objectfunction demo()&#123; console.log('demo'); &#125; console.log(typeof demo); // 返回function JavaScript变量JavaScript 变量是存储数据值的容器，作用和Java里的变量类似 其声明形式不需要指定具体类型，统一用var关键字声明 123var x = 7;var y = 8;var z = x + y; Js标识符：所有JavaScript变量必须以唯一的名称标识。这些唯一的名称称为标识符，标识符命名规则与java基本一致 JavaScript 变量可存放多种数据类型： ​ 字符串被包围在双引号或单引号中。数值不用引号。如果把数值放在引号中，会被视作文本字符串。 程序控制语句条件语句用来执行逻辑判断的语句 条件判断语句 123456789var a = 1;if(a = 1)&#123; console.log("A");&#125;else&#123; console.log("B"); if(a != 5)｛ console.log("C"); ｝&#125; 条件分支语句 123456789101112var a = 1; switch(a)&#123; case 1: console.log("1"); break; case 2: console.log("2"); break; default: console.log("其他"); break; &#125; 循环语句使代码能在某种条件下不断执行的语句 for循环 12345678910111213/**语法**/for(初始化变量; 条件表达式; 更新变量)&#123; 语句...&#125; /**例**/function p(i)&#123; document.write(i); document.write("&lt;br&gt;");&#125;for(var i = 0; i &lt; 10; i++)&#123; p(i);&#125; for…in循环： 用于对数组或者对象的属性进行循环操作 循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作 1234567891011121314/**语法**/for (变量 in 对象)&#123; 执行代码...&#125;/**例**/var xvar mycars = new Array()mycars[0] = "Saab"mycars[1] = "Volvo"mycars[2] = "BMW"for (x in mycars)&#123; document.write(mycars[x] + "&lt;br /&gt;")&#125; 对象自定义对象 使用new关键字创建对象 12345var person = new Person();person.name = "Nya";person.age = 21;person.sex = "男";//创建了对象的一个新实例，并向其添加了四个属性 new所调用的函数是一个构造函数constructor()，构造函数是专门用来创建对象的函数，使用typeof语句会返回object 通过function设计一个对象 12345678910//创建函数构造器function person(name, age, sex)&#123; this.name = name; this.age = age; this.sex = sex //在JS中，this通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）&#125;//创建对象实例var myFather = new person("Ton", 51, "男");var myMother = new person("Sally", 49, "女"); 构造函数内部也可以定义方法 使用JSON创建对象 –-详见数据类型一节-– JS内置对象Window对象 Document对象 Document对象包含当前文档的信息，例如：标题、背景、颜色、表格等 常用方法： 通过write()方法在浏览器中显示内容 getElementById()和getElementByTagName()，这两个方法会忽略文档的结构，可查找整个HTML文档中的任何元素（不论它们在文档中所处的位置，例如通过getElementByTagName()可以把文档中所有的元素找到） cookie方法会返回一个包含所有的cookie的字符串，每条cookie以分号和空格(; )分隔(即key*=*value键值对)： 1allCookies = document.cookie; body方法会返回道歉文档中的&lt;body&gt;元素或者&lt;frameset&gt;元素 Screen对象 window.screen对象在编写时可以不使用 window 这个前缀 一些属性： screen.availWidth - 可用的屏幕宽度 1document.write("可用宽度: " + screen.availWidth); screen.availHeight - 可用的屏幕高度 1document.write("可用高度: " + screen.availHeight); Location对象 location.href 属性 12345//改变当前网页地址（加载新的网页）：location.href = 'http://www.baidu.com';//返回（当前页面的)整个URL：document.write(location.href); History对象 一些方法： history.back() 123456&lt;input type="button" value="Back" onclick="goBack()"&gt;&lt;script&gt; function goBack()&#123; window.history.back() &#125;&lt;/script&gt; 以上代码效果为返回上一页按钮 history.forward() 123456&lt;input type="button" value="Forward" onclick="goForward()"&gt;&lt;script&gt; function goBack()&#123; window.history.forwardk() &#125;&lt;/script&gt; 以上代码效果为跳到下一页按钮 函数JavaScript函数语法1234function functionname( 参数.../*可选*/ )&#123; // 执行代码&#125;//注：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数 ​ 当调用该函数时，会执行函数内的代码。 ​ 可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。 获取函数参数 常规方式 通过内置arguments对象获取 自调用函数函数表达式可以 “自调用”，自调用表达式会自动调用。 如果表达式后面紧跟 () ，则会自动调用。 不能自调用声明的函数。 通过添加括号，来说明它是一个函数表达式 1234(function () &#123; var x = "Hello!!"; // 我将调用自己&#125;)();//以上函数实际上是一个匿名自我调用的函数(没有函数名) JavaScript的使用场景添加交互事件​ 对事件做出反应 ​ 可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时 1&lt;h1 onclick=&quot;this.innerHTML=&apos;Ooops!&apos;&quot;&gt;点击文本!&lt;/h1&gt; 操作DOM元素​ 可以使用JavaScript 来向HTML DOM元素分配事件： 12//例：向button元素分配onclick事件：document.getElementById("myBtn").onclick=function()&#123;displayDate()&#125;; 操作样式​ JavaScript操作style样式 1234//语法dom.style.属性名 = 属性值;//例如：document.getElementsByClassName('box')[0].style.background = 'red'; 验证表单 必填（或必选项目） JavaScript可以用来检查用户是否已填写表达中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出 1234567891011121314&lt;form name="myForm" action="demo-form.php" onsubmit="return validateForm()" method="post"&gt;姓: &lt;input type="text" name="fname"&gt;&lt;input type="submit" value="提交"&gt;&lt;/form&gt;function validateForm()&#123; var x=document.forms["myForm"]["fname"].value; if (x==null || x=="") &#123; alert("姓必须填写"); return false; &#125;&#125; Email验证 检查输入的数据是否符合电子邮件地址的基本语法，只能做些基本检查： 输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号 1234567891011121314&lt;form name="myForm" action="demo-form.php" onsubmit="return validateForm();" method="post"&gt; Email: &lt;input type="text" name="email"&gt; &lt;input type="submit" value="提交"&gt;&lt;/form&gt;function validateForm()&#123; var x=document.forms["myForm"]["email"].value; var atpos=x.indexOf("@"); var dotpos=x.lastIndexOf("."); if (atpos&lt;1 || dotpos&lt;atpos+2 || dotpos+2&gt;=x.length)&#123; alert("不是一个有效的 e-mail 地址"); return false; &#125;&#125; 异步请求Ajax请求： 同步请求:只有当一次请求完全结束以后才能够发起另一次请求 异步请求:不需要其他请求结束就可以向服务器发起请求 Ajax：Asynchronous javaScript and xml (异步的JavaScript和xml技术)。 当我们向服务器发起请求的时候，服务器不会像浏览器响应整个页面，而是只有局部刷新。它是一个异步请求，浏览器页面只需要进行局部刷新，效率非常的高 正则匹配 详见上文正则部分 定时器js 定时器有以下两个方法： setInterval不停地重复执行，按照指定的周期（以毫秒计）来调用函数或计算表达式。方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭 使用形式：函数setInterval(函数名, 重复执行的时间间隔毫秒数 ); 12345678910111213141516171819&lt;script&gt;function printTime()&#123; var d = new Date(); var h= d.getHours(); var m= d.getMinutes(); var s= d.getSeconds(); document.getElementById("time").innerHTML= h+":"+m+":"+s;&#125;function showTimeIn3Seconds()&#123; setTimeout(printTime,3000); &#125;&lt;/script&gt;&lt;div id="time"&gt;&lt;/div&gt;&lt;button onclick="showTimeIn3Seconds()"&gt;点击后3秒钟后显示当前时间，并且只显示一次&lt;/button&gt;/**通过setInterval**重复执行同一个函数**，重复的时间间隔由第二个参数指定**/ setTimeout在指定的毫秒数后调用函数或计算表达式 使用形式：函数setTimeout(functionname, 距离开始时间毫秒数 ); 123456789101112131415161718//例：每隔1秒钟，打印当前时间&lt;script&gt;function printTime()&#123; var d = new Date(); var h= d.getHours(); var m= d.getMinutes(); var s= d.getSeconds(); document.getElementById("time").innerHTML= h+":"+m+":"+s;&#125;var t = setInterval(printTime,1000);&lt;/script&gt;&lt;div id="time"&gt;&lt;/div&gt;/**document.getElementById 获取id=time的div元素 .innerHTML 修改该元素的内容**/ 事件事件是JavaScript允许HTML与用户交互的行为。 用户任何对网页的操作，都会产生一个事件 onchange HTML元素改变事件123456789//例：离开输入字段时，会触发一个函数，将输入文本转换为大写&lt;script&gt;function myFunction() &#123; var x = document.getElementById("fname"); x.value = x.value.toUpperCase();&#125;&lt;/script&gt;请输入您的名字：&lt;input type="text" id="fname" onchange="myFunction()"&gt; onclick 鼠标点击事件12345678//例：点击按钮弹出“Hello JavaScript”&lt;script&gt;function showHello()&#123; alert("Hello JavaScript");&#125;&lt;/script&gt;&lt;button onclick="showHello()"&gt;点击一下&lt;/button&gt; onbluronblur 事件会在对象失去焦点时发生 12345678910//例：离开输入框后会将文本转化为大写&lt;script type="text/javascript"&gt;function upperCase()&#123; var x=document.getElementById("fname").value document.getElementById("fname").value=x.toUpperCase()&#125;&lt;/script&gt;输入您的姓名：&lt;input type="text" id="fname" onblur="upperCase()" /&gt; onmouseover / onmouseout12345678910111213//例：鼠标移入移出事件&lt;script&gt;function mOver(obj) &#123; obj.innerHTML = "谢谢您"&#125;function mOut(obj) &#123; obj.innerHTML = "请把鼠标移上来"&#125;&lt;/script&gt;&lt;div onmouseover="mOver(this)" onmouseout="mOut(this)" style="background-color:#D94A38;width:120px;height:20px;padding:40px;"&gt; 请把鼠标移上来&lt;/div&gt; onload1234567891011121314//onload事件&lt;script&gt;function checkCookies() &#123; var text = ""; if (navigator.cookieEnabled == true) &#123; text = "Cookie 已启用"; &#125; else &#123; text = "Cookie 未启用"; &#125; document.getElementById("demo").innerHTML = text;&#125;&lt;/script&gt;&lt;p id="demo"&gt;&lt;/p&gt; onkeydown键盘按下事件]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Java学习总结</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
